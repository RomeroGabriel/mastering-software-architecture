{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mastering Software Architecture","text":"<p>An one-stop Wiki for Software Architecture studies. A centralized repository for all things architecture! \ud83c\udfdb\ufe0f #SoftwareArchitectures</p>"},{"location":"#references","title":"References","text":"<p>The following is a list of materials utilized for studying and creating this documentation:</p> <ul> <li>Fundamentals of Software Architecture</li> </ul> <p>*and of course chatGPT </p>"},{"location":"basic/whats_software_arc/","title":"What is Software Architecture?","text":"<p>Software Architecture is a dynamic and complex field that continues to evolve rapidly. Recent years have witnessed advancements such as CI/CD, microservices, containerization, and cloud-based resources. These innovations bring new capabilities and trade-offs to consider.</p> <p>In software development, understanding trade-off analysis is crucial for making informed decisions. This repository emphasizes analyzing trade-offs rather than passing judgments on technologies.</p> <p>It is crucial to recognize that architectures are shaped by their context. Architectural decisions are often influenced by the realities of the environment they operate in. For instance, attempting to implement a microservices architecture in 2002 would have been impractical.</p>"},{"location":"basic/whats_software_arc/#defining-software-architecture","title":"Defining Software Architecture","text":"<p>Defining Software Architecture is challenging due to various interpretations. It may be seen as the blueprint or roadmap for a system. However, what aspects does an architect analyze when examining an architecture?</p> <p>One definition in Fundamentals of Software Architecture is illustrated on the image bellow. In this definition, software architecture consists of the structure of the system, combined with architecture characteristics the system must support, architecture decisions, and design principles.</p> <p></p> <p>Architecture consists of the structure combined with architecture characteristics (\u201c-ilities\u201d), architecture decisions, and design principles</p>"},{"location":"basic/whats_software_arc/#structure","title":"Structure","text":"<p>Structure refers to the type of architecture styles used in the system</p> <p>The system structure refers to the architecture style(s) implemented in the system, like microservices, layered, or microkernel. However, it's important to note that the system structure alone does not fully describe a system architecture.</p>"},{"location":"basic/whats_software_arc/#architecture-characteristics","title":"Architecture characteristics","text":"<p>Architecture characteristics refers to the \u201c-ilities\u201d that the system must support</p> <p>Architecture characteristics define the success criteria for a system, independent of its functionality. They are essential for the system to function correctly and do not necessarily rely on knowing the specifics of its functionality.</p>"},{"location":"basic/whats_software_arc/#architecture-decisions","title":"Architecture decisions","text":"<p>Architecture decisions are rules for constructing systems</p> <p>Architecture decisions establish the guidelines for system construction. They impose constraints and provide direction to development teams, outlining what is permissible and what is not within the system.</p>"},{"location":"basic/whats_software_arc/#design-principles","title":"Design principles","text":"<p>Design principles are guidelines for constructing systems</p> <p>The design principles is a guideline rather than a hard-and-fast rule like architecture decisions. As an example, the design principle depicted in the image above guides development team to utilize asynchronous messaging for improved performance in a microservice architecture. Architecture decisions cannot account for every communication scenario between services. Hence, design principles offer guidance, such as employing async messaging, enabling developers to choose suitable communication protocols like REST or gRPC.</p>"},{"location":"basic/whats_software_arc/#references","title":"References","text":"<ul> <li>Fundamentals of Software Architecture</li> </ul>"}]}